(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{196:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){this._self._c;return this._m(0)}),[function(){var t=this,a=t._self._c;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),a("h2",{attrs:{id:"http介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http介绍"}},[t._v("#")]),t._v(" HTTP介绍")]),t._v(" "),a("p",[t._v("HTTP（超文本传输协议）是应用层上的一种客户端/服务端模型的通信协议,它由请求和响应构成，且是无状态的。")]),t._v(" "),a("ul",[a("li",[t._v("协议\n规定了通信双方必须遵循的数据传输格式，这样通信双方按照约定的格式才能准确的通信。")]),t._v(" "),a("li",[t._v("无状态\n两次连接通信之间是没有任何关系的，每次都是一个新的连接，服务端不会记录前后的请求信息。")])]),t._v(" "),a("p",[a("strong",[t._v("URL的构成")]),t._v("\nhttp://www.xx.com/index.html?name=zhangsan\nhttp: 协议\nwww.xx.xom: 主机\nindex.html: 路径\n和参数")]),t._v(" "),a("p",[a("strong",[t._v("协议内容")]),t._v("\n请求( request )\n客户端发送一个HTTP请求到服务端的格式：")]),t._v(" "),a("ul",[a("li",[t._v("请求行")]),t._v(" "),a("li",[t._v("请求头")]),t._v(" "),a("li",[t._v("请求体")])]),t._v(" "),a("h3",{attrs:{id:"响应（response）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应（response）"}},[t._v("#")]),t._v(" 响应（Response）")]),t._v(" "),a("p",[t._v("服务端响应客户端格式：")]),t._v(" "),a("ul",[a("li",[t._v("状态行")]),t._v(" "),a("li",[t._v("响应头")]),t._v(" "),a("li",[t._v("响应体")])]),t._v(" "),a("h2",{attrs:{id:"http状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" HTTP状态码")]),t._v(" "),a("p",[a("strong",[t._v("403 Forbidden")])]),t._v(" "),a("p",[t._v("该状态码表明对请求资源的访问被服务器拒绝了，资源不可用，服务器没有必要给出详细理由。如果想做说明可以在实体的主体部分对原因\n进行描述。下面的403的一些原因")]),t._v(" "),a("ul",[a("li",[t._v("IP 列入黑名单")]),t._v(" "),a("li",[t._v("一时间访问很多次网址 被拒绝")]),t._v(" "),a("li",[t._v("没有执行权限")]),t._v(" "),a("li",[t._v("DNS解析错误")])]),t._v(" "),a("br"),t._v(" "),a("h3",{attrs:{id:"get-和-post-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别"}},[t._v("#")]),t._v(" GET 和 POST 的区别")]),t._v(" "),a("p",[t._v("HTTP最早是被用作浏览器和服务器之间交互HTML和表单的通讯协议，后来被广泛扩从到接口格式的定义。所以讨论POST 和 GET之前，要先确定是浏览器使用的还是HTTP作为接口传输协议的场景。")]),t._v(" "),a("h3",{attrs:{id:"浏览器的get-和-post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的get-和-post"}},[t._v("#")]),t._v(" 浏览器的GET 和 POST")]),t._v(" "),a("p",[t._v("浏览器用GET请求来获取一个html页面的静态资源， 用POST来提交一个 form表单，得到一个结果的网页。")]),t._v(" "),a("p",[a("strong",[t._v("副作用是指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。")])]),t._v(" "),a("p",[a("strong",[t._v("幂等指的是发送M和N次请求（两者不相同都大于1），服务器上资源的状态一致，比如注册10个和11个账号是不幂等的，对文章进行更改10次和11次是幂等的。")])]),t._v(" "),a("p",[a("strong",[t._v("GET多用于无副作用，幂等的场景，例如搜索关键字。POST多用于副作用，不幂等的场景 例如注册")])]),t._v(" "),a("h4",{attrs:{id:"get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" GET")]),t._v(" "),a("p",[t._v("读取一个资源， 比如get到一个html文件，反复读取不应该对访问的数据有副作用。比如 get一下，用户就下单了，返回订单受理。没有副作用称为 "),a("strong",[t._v("幂等")]),t._v(" 因为GET因为是读取，就可以对GET请求的数据做缓存，这个缓存可以做到浏览器本身上 也可以做到代理上，或者做到server端（用Etag，至少可以减少带宽消耗）。")]),t._v(" "),a("h4",{attrs:{id:"post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[t._v("#")]),t._v(" POST")]),t._v(" "),a("p",[t._v("在页面里form 标签会定义一个表单，点击其中的submit元素会发出一个POST请求让服务器做一件事。这件事往往是有副作用的 不幂等的。")]),t._v(" "),a("p",[t._v("GET 和POST携带的数据格式也有区别。当浏览器发出一个GET请求，意味着用户自己要么在浏览器的地址输入，要么就是点击了a标签的href的url。"),a("strong",[t._v("所以并不是GET只能用URL，而是浏览器直接发出的GET只能由一个url触发，所以GET上要在url上之外带一些参数就只能依靠url上附带queryString. 但是HTTP协议本身没有这个限制。")])]),t._v(" "),a("p",[t._v("浏览器的POST请求都来自表单提交，每次提交，表单的数据被浏览器用编码到HTTP请求的Body里。浏览器发出的POST请求的Body主要有两种格式，一种是application/x-www-form-urlencoded 用来传输数据，"),a("strong",[t._v("大概就是key=value&key1=value1这种格式，另一种是传文件，会采用form-data格式。采用后者是因为前面的那种的编码方式对于文件这种二进制的数据非常低效。")])]),t._v(" "),a("p",[t._v("一般说 GET请求没有body，只有url，请求数据放在url的queryString中，POST请求的数据在body中。但是这种的情况仅限于浏览器发请求的场景")]),t._v(" "),a("h3",{attrs:{id:"接口中的get和post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口中的get和post"}},[t._v("#")]),t._v(" 接口中的GET和POST")]),t._v(" "),a("p",[t._v("通过浏览器的Ajax api， postman之类的工具发出来的GET和POST请求。此时 GET/POST不能光用在前端和后端的交互中。尽管RPC有很多协议，但是http本身已经有大量的现成的支持工具可以使用，并且对人类很友好。容易debug。HTTP协议在微服务中的使用是相当普遍的。")]),t._v(" "),a("p",[t._v("当用HTTP实现接口发送请求，就没有浏览器中那么多限制，只要符合HTTP格式的就可以发。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<METHOD> <URL> HTTP/1.1\n<Header1>:\n<Header2>: \n<BODY Data....>\n")])])]),a("p",[t._v("但是也不能太自由的使用，所以有了一些接口规范，REST。 GET、POST、PUT、DELETE。获取 创建 替换 删除。同时还推荐使用json格式，这样就通过看method就知道是什么意思。解析格式也得到统一了。")]),t._v(" "),a("ul",[a("li",[t._v("Json 可以有嵌套结构")]),t._v(" "),a("li",[t._v("可以支持更丰富的数据类型 json可以直接被服务器代码映射为业务实体用起来方便")]),t._v(" "),a("li",[t._v("如果接口支持上传文件 那么还是form-data 格式更合适")])]),t._v(" "),a("h3",{attrs:{id:"rest里面的get-和-post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rest里面的get-和-post"}},[t._v("#")]),t._v(" REST里面的GET 和 POST")]),t._v(" "),a("p",[t._v("GET 在 资源定位符被用于获取资源或者资源列表。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GET http://foo.com/books\nGET http://foo.com/books/:bookId\n")])])]),a("blockquote",[a("p",[t._v("REST 的 POST 和 PUT的区别，PUT的语法实际上是替换 replace。 REST规范里提到PUT的请求体应该是完整的资源，包括id在内。这样服务器就可以根据id去查找，如果存在对应的id元素，就用请求中的数据整体替换已经存在的资源，如果没有就用 把这个id对应的资源从空替换为请求数据，这个看起来就像是 创建。")])]),t._v(" "),a("blockquote",[a("p",[t._v("至于到底用PUT还是POST，完全看是不是可以提前知道资源所有的数据，尤其是id。对于那些id是自动生成的场景 POST更加合适。如果提前知道某个id是什么，PUT更加合适。")])]),t._v(" "),a("h3",{attrs:{id:"安全性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全性"}},[t._v("#")]),t._v(" 安全性")]),t._v(" "),a("p",[t._v("无论是GET还是POST，都不够安全，因为HTTP本身就是明文协议。每个请求和返回的每个byte都在网络上传播。所以避免传输中数据被窃取，"),a("strong",[t._v("必须从客户端到服务端的端对端加密，就是https。利用SSL协议协商出的密钥加密明文的http数据。这个加密的协议和HTTP协议本身相互独立。")])]),t._v(" "),a("p",[t._v("安全是一个很大的主题，由很多细节组成的一个完备体系。比如返回私密数据的mask，XSS，CSRF，跨域安全，前端加密，钓鱼，salt。POST和GET在安全这件事是个很小的角色。所以单独讨论没有什么意义。一般私密数据传输用 POST + body；")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("login\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"username"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"duihua"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"password"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1230oiss"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码"}},[t._v("#")]),t._v(" 编码")]),t._v(" "),a("p",[t._v("URL只能使用英文字母、阿拉伯数字和某些标点符号、不能使用其他文字和符号。")]),t._v(" "),a("p",[a("strong",[t._v("GET和POST方法的编码使用的是网页的编码。例如百度是GB2321，谷歌使用的是UTF-8")])]),t._v(" "),a("p",[t._v("由于有很多编码，很混乱，所以JavaScript会将其都编码成 unicode字符。")]),t._v(" "),a("h4",{attrs:{id:"encodeuri"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#encodeuri"}},[t._v("#")]),t._v(" encodeURI")]),t._v(" "),a("p",[t._v("对真正的URL编码的函数。着眼于对整个URL进行编码。 对应的解码函数是 decodeURI。")]),t._v(" "),a("h4",{attrs:{id:"encodeuricomponent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#encodeuricomponent"}},[t._v("#")]),t._v(" encodeURIComponent")]),t._v(" "),a("p",[t._v("与上面的区别是 对URL的组成部分进行个别编码，能对某些不编码的符号进行编码。对应的解码是decodeURIComponent")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mail@example.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mail%40example.com")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURI")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mail@example.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main@example.com")]),t._v("\n")])])]),a("h2",{attrs:{id:"http-之-content-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-之-content-type"}},[t._v("#")]),t._v(" HTTP 之 Content-Type")]),t._v(" "),a("p",[t._v("Content—Type 是用来指定请求或响应的内容类型，告诉浏览器或者相关设备如何显示或处理加载的数据，此属性的值可以查看MIME的类型。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v('text/html 是请求的media-type，他分为两个部分type和subtype，以"/" 进行分割; 常见的type有：')]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[t._v("Text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；\nMultipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；\nApplication：用于传输应用程序数据或者二进制数据；\nMessage：用于包装一个E-mail消息；\nImage：用于传输静态图片数据；\nAudio：用于传输音频或者音声数据；\nVideo：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。\n")])])])]),t._v(" "),a("li",[a("p",[t._v("常见的 media-type 有：")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[t._v("text/html\napplication/x-www-form-urlencoded\napplication/json\nmultipart/form-data\napplication/xml\ntext/plain\ntext/css\ntext/javascript\n")])])]),a("p",[t._v("boundary：多用于上传文件时使用，用于分割数据；")])])]),t._v(" "),a("h3",{attrs:{id:"常见的content-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的content-type"}},[t._v("#")]),t._v(" 常见的Content-Type")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("application/x-www-form-urlencoded")])]),t._v(" "),a("p",[t._v("主要用于表单形式的 POST请求，普通的表单提交，js发包 默认都是这种方式。")])]),t._v(" "),a("li",[a("p",[t._v("multipart / form-data 是使用 POST请求上传文件，如果上传照片，文件等。")])])]),t._v(" "),a("h2",{attrs:{id:"post-几种提交数据的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-几种提交数据的方式"}},[t._v("#")]),t._v(" POST 几种提交数据的方式")]),t._v(" "),a("p",[t._v("HTTP请求方法有 OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT 这几种。"),a("strong",[t._v("HTTP协议是 以ASCII码传输，建立在 TCP/IP 协议之上的应用层规范。")]),t._v(" 规范把HTTP请求分为三部分: 状态行、请求头、消息主体。")]),t._v(" "),a("p",[t._v("协议规定 POST提交数据必须放在消息主体（entity-body）中, 但是协议并没有规定数据必须使用什么编码方式。只要发送过去的数据能够被服务端解析成功才有意义，服务端会根据请求头 (headers)中的 Content-Type 字段来获知请求中的消息主体是何种方式编码的，在对主体进行解析。所以 POST提交数据方案，包含了Content-Type 和消息主体编码方式两部分。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("application/x-www-form-urlencoded\n这应该是最常见的 POST 提交数据的方式了。Content-Type 被指定为 application/x-www-form-urlencoded；其次，提交的数据按照 key1=val1&key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。")])]),t._v(" "),a("li",[a("p",[t._v("multipart/form-data\n表单上传文件时，必须让 form 表单的enctype 等于 multipart/form-data。")])])]),t._v(" "),a("p",[t._v("body内容如下")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('------WebKitFormBoundary18bktajg65CSIx4j\nContent-Disposition: form-data; name="files"; filename="test1.txt"\nContent-Type: text/plain\n\nthis is file1;\n------WebKitFormBoundary18bktajg65CSIx4j\nContent-Disposition: form-data; name="files"; filename="test2.txt"\nContent-Type: text/plain\n\nthis is file2;\n------WebKitFormBoundary18bktajg65CSIx4j--\n')])])]),a("ul",[a("li",[t._v("application/json\napplication/json是POST请求以JSON的格式向服务请求发起请求或者请求返回JSON格式的响应内容，服务端接受到数据后对JSON进行解析拿到所需要的参数，")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{"comboId":" ","goodsList":[{"goodsId":1372308,"skuId":"1372308-228f0bba1bd1b7241353429cebd7c88b","isHuanGou":0,"selected":1,"count":2,"cartGoodsType":0,"activitySchemeId":111873,"goodsActivityGiftListTemp":[]}]}\n')])])]),a("h2",{attrs:{id:"websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" WebSocket")]),t._v(" "),a("p",[t._v("首先 WebSocket 是 HTML5的东西（协议），HTTP协议不支持长连接，是无状态的。在HTTP1.1中增加了一个 keep-alive，\n是把多个请求合并为一个，但是WebScoket其实是一个新协议，跟 HTTP没有什么关系，只不过兼容了握手规范。")]),t._v(" "),a("h4",{attrs:{id:"协议内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协议内容"}},[t._v("#")]),t._v(" 协议内容")]),t._v(" "),a("ul",[a("li",[t._v("HTTP协议是一个请求对应一个相应，及时是1.1 的 keep-alive，依然是一个请求对应一个响应。")]),t._v(" "),a("li",[t._v("所谓的轮询，long poll 都是被动的，都是客户端不断的建立 HTTP连接，等待服务端处理。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 客户端请求\nGET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nOrigin: http://shiya.com\n")])])]),a("ul",[a("li",[t._v("Sec-WebSocket-Key 是一个Base64 encode的值，这个是浏览器随机生成的，告诉服务器验证身份。")]),t._v(" "),a("li",[t._v("Sec_WebSocket-Protocol 是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的协议")]),t._v(" "),a("li",[t._v("Sec-WebSocket-Version 是告诉服务器所使用的Websocket Draft（协议版本）")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 服务端响应\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\nSec-WebSocket-Protocol: chat // 最终协议\n")])])]),a("p",[t._v("服务端返回之后，告诉客户端即将升级 WebScoket协议，")]),t._v(" "),a("h3",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),a("p",[t._v("WebScoket 在第一次建立连接确认之后，就升级为WebScoket协议，后面一旦服务端有消息 就会自动推送。\nWebsocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接/状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。同时由客户主动询问，转换为服务器（推送）有信息的时候就发送（当然客户端还是等主动发送信息过来的。。），没有信息的时候就交给接线员（Nginx），不需要占用本身速度就慢的客服（Handler）了。")]),t._v(" "),a("h3",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("p",[t._v("WebSocket.OPENING (0)：正在建立连接。\nWebSocket.OPEN (1)：已经建立连接。\nWebSocket.CLOSING (2)：正在关闭连接。\nWebSocket.CLOSE (3)：已经关闭连接。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WSURL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wss://echo.websocket.org/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dom "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'output'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testWebSocket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" websocket "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WSURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * \n     */")]),t._v("\n\n    websocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onopen")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 建立连接")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onopen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      websocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this is webscoket message'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    websocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onclose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ev")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    websocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ev")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'load'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testWebSocket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}],!1,null,null,null);a.default=e.exports}}]);