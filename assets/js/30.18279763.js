(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{197:function(t,e,a){"use strict";a.r(e);var _=a(0),v=Object(_.a)({},(function(){this._self._c;return this._m(0)}),[function(){var t=this,e=t._self._c;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"tcp-ip-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip-协议"}},[t._v("#")]),t._v(" TCP / IP 协议")]),t._v(" "),e("h2",{attrs:{id:"udp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[t._v("#")]),t._v(" UDP")]),t._v(" "),e("p",[t._v("UDP 是一个面向报文（报文可以理解为一段段的数据）的协议。意思就是 UDP 只是报文的搬运工，不会对报文进行任何拆分和拼接操作。")]),t._v(" "),e("ul",[e("li",[t._v("不可靠")]),t._v(" "),e("li",[t._v("高效")]),t._v(" "),e("li",[t._v("传输方式多样")])]),t._v(" "),e("h2",{attrs:{id:"tcp-三次握手-四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手-四次挥手"}},[t._v("#")]),t._v(" TCP 三次握手 四次挥手")]),t._v(" "),e("p",[t._v("RFC 793里面描述，TCP 需要 seq 序列号做可靠重传或接收，而避免连接重复时无法分辨出 seq 是延迟或者是 旧链接的 seq，因此需要三次握手来约定确定双方的 ISN（初始seq序列号）"),e("strong",[t._v("三次握手的原则设计是防止旧复用链接的初始化导致问题")])]),t._v(" "),e("ul",[e("li",[t._v("第一 TCP的可靠连接是靠 seq （sequence numbers 序列号）来达成。"),e("strong",[t._v("TCP连接 发送的每一个包，都有一个 sequence number。而每个包都是有序列号的，所以都能被确认收到这些包。")])]),t._v(" "),e("li",[t._v("如果一条连接突然断开，重连之后TCP 怎么识别之前的旧链接重发的包，"),e("strong",[t._v("就需要独一无二的 ISN （初始序列号）机制")])]),t._v(" "),e("li",[t._v("客户端和 服务端需要交换 ISN，以便让对方知道接下来接收数据的时候如何按照序列号组装数据。所以避免攻击者知道确认号，ISN是动态生成的")])]),t._v(" "),e("h3",{attrs:{id:"isn-初始序列号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#isn-初始序列号"}},[t._v("#")]),t._v(" ISN 初始序列号")]),t._v(" "),e("p",[t._v("当一端为建立连接而发送它的SYN时，它为连接选择一个初始序号。ISN随时间而变化，因此每个连接都将具有不同的ISN。ISN可以看作是一个32比特的计数器，每4ms加1 。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释。")]),t._v(" "),e("h2",{attrs:{id:"url的加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#url的加载"}},[t._v("#")]),t._v(" URL的加载")]),t._v(" "),e("ol",[e("li",[t._v("首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来")]),t._v(" "),e("li",[t._v("接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了")]),t._v(" "),e("li",[t._v("TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据")]),t._v(" "),e("li",[t._v("数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件")]),t._v(" "),e("li",[t._v("首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错")]),t._v(" "),e("li",[t._v("浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件")]),t._v(" "),e("li",[t._v("文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 "),e("code",[t._v("script")]),t._v(" 标签的话，会判断是否存在 "),e("code",[t._v("async")]),t._v(" 或者 "),e("code",[t._v("defer")]),t._v(" ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。")]),t._v(" "),e("li",[t._v("初始的 HTML 被完全加载和解析后会触发 "),e("code",[t._v("DOMContentLoaded")]),t._v(" 事件")]),t._v(" "),e("li",[t._v("CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西")]),t._v(" "),e("li",[t._v("在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了")])]),t._v(" "),e("h2",{attrs:{id:"http-首部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-首部"}},[t._v("#")]),t._v(" HTTP 首部")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("通用字段")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Cache-Control")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("控制缓存的行为")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Connection")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("浏览器想要优先使用的连接类型，比如 "),e("code",[t._v("keep-alive")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Date")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("创建报文时间")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Pragma")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("报文指令")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Via")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("代理服务器相关信息")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Transfer-Encoding")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("传输编码方式")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Upgrade")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("要求客户端升级协议")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Warning")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("在内容中可能存在错误")])])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("请求字段")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Accept")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("能正确接收的媒体类型")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Accept-Charset")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("能正确接收的字符集")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Accept-Encoding")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("能正确接收的编码格式列表")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Accept-Language")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("能正确接收的语言列表")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Expect")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("期待服务端的指定行为")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("From")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("请求方邮箱地址")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Host")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("服务器的域名")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("If-Match")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("两端资源标记比较")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("If-Modified-Since")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("本地资源未修改返回 304（比较时间）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("If-None-Match")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("本地资源未修改返回 304（比较标记）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("User-Agent")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("客户端信息")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Max-Forwards")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("限制可被代理及网关转发的次数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Proxy-Authorization")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("向代理服务器发送验证信息")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Range")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("请求某个内容的一部分")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Referer")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("表示浏览器所访问的前一个页面")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("TE")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("传输编码方式")])])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("响应字段")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Accept-Ranges")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是否支持某些种类的范围")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Age")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("资源在代理缓存中存在的时间")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ETag")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("资源标识")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Location")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("客户端重定向到某个 URL")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Proxy-Authenticate")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("向代理服务器发送验证信息")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Server")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("服务器名字")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("WWW-Authenticate")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("获取资源需要的验证信息")])])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("实体字段")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Allow")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("资源的正确请求方式")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Content-Encoding")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("内容的编码格式")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Content-Language")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("内容使用的语言")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Content-Length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("request body 长度")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Content-Location")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("返回数据的备用地址")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Content-MD5")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Base64加密格式的内容 MD5检验值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Content-Range")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("内容的位置范围")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Content-Type")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("内容的媒体类型")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Expires")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("内容的过期时间")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Last_modified")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("内容的最后修改时间")])])])]),t._v(" "),e("h2",{attrs:{id:"https"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),e("p",[t._v("HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。")]),t._v(" "),e("h3",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),e("h2",{attrs:{id:"tls"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tls"}},[t._v("#")]),t._v(" TLS")]),t._v(" "),e("p",[t._v("TLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，接下来可以通过 Session Resumption 减少到一个 RTT。")]),t._v(" "),e("p",[t._v("在 TLS 中使用了两种加密技术，分别为：对称加密和非对称加密。")]),t._v(" "),e("h3",{attrs:{id:"对称加密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对称加密"}},[t._v("#")]),t._v(" 对称加密")]),t._v(" "),e("p",[t._v("对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密")]),t._v(" "),e("h3",{attrs:{id:"非对称加密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密"}},[t._v("#")]),t._v(" 非对称加密")]),t._v(" "),e("p",[t._v("有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。")]),t._v(" "),e("ol",[e("li",[t._v("客户端发送一个随机值，需要的协议和加密方式")]),t._v(" "),e("li",[t._v("服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，发送自己的证书（如果需要验证客户端证书需要说明）")]),t._v(" "),e("li",[t._v("客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书")]),t._v(" "),e("li",[t._v("服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密")])]),t._v(" "),e("p",[t._v("通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。")]),t._v(" "),e("h2",{attrs:{id:"http2-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" HTTP2.0")]),t._v(" "),e("p",[t._v("在 HTTP 1.X 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量，当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。")]),t._v(" "),e("h3",{attrs:{id:"多路复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" 多路复用")]),t._v(" "),e("p",[t._v("在 HTTP 2.0 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。")]),t._v(" "),e("p",[t._v("帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。")]),t._v(" "),e("p",[t._v("多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。")]),t._v(" "),e("h3",{attrs:{id:"二进制传输"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二进制传输"}},[t._v("#")]),t._v(" 二进制传输")]),t._v(" "),e("p",[t._v("HTTP 2.0 引入了二进制传输，所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。")]),t._v(" "),e("h3",{attrs:{id:"header-压缩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#header-压缩"}},[t._v("#")]),t._v(" Header 压缩")]),t._v(" "),e("p",[t._v("在 HTTP 1.X 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。")]),t._v(" "),e("p",[t._v("在 HTTP 2.0 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。")])])}],!1,null,null,null);e.default=v.exports}}]);