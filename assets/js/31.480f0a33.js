(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{198:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){this._self._c;return this._m(0)}),[function(){var t=this,a=t._self._c;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"xmlhttrequest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttrequest"}},[t._v("#")]),t._v(" XMLHttRequest")]),t._v(" "),a("p",[t._v("XHR对象跟服务端交互，可以从URL获取数据，无需让整个页面刷新。")]),t._v(" "),a("p",[t._v("EventTarget   <===     XMLHttpRequestEventTarget   <===    XMLHttpRequest")]),t._v(" "),a("p",[t._v("XHR 可以获取任何类型的数据。"),a("strong",[t._v("如果通信流程需要从服务器接收事件或消息数据，全双工的通信建议使用 WebScoket")])]),t._v(" "),a("p",[a("strong",[t._v("一个HTTP请求由4部分组成：")])]),t._v(" "),a("ul",[a("li",[t._v("HTTP请求方法")]),t._v(" "),a("li",[t._v("正在请求的URL")]),t._v(" "),a("li",[t._v("一个可选的请求集合，其中可能包含身份验证信息")]),t._v(" "),a("li",[t._v("一个可选的请求主体")])]),t._v(" "),a("p",[a("strong",[t._v("服务器返回的HTTP响应包含3部分：")])]),t._v(" "),a("ul",[a("li",[t._v("一个数字和文字组成的状态码 显示请求失败还是成功")]),t._v(" "),a("li",[t._v("一个响应头集合")]),t._v(" "),a("li",[t._v("响应主体")])]),t._v(" "),a("p",[t._v("XMLHttpRequest 不是协议级的 HTTP API 而是浏览器级的API。浏览器需要考虑 cookie、重定向、缓存和代理，但是代码只需要担心请求和响应。")]),t._v(" "),a("h3",{attrs:{id:"指定请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定请求"}},[t._v("#")]),t._v(" 指定请求")]),t._v(" "),a("p",[t._v("创建 XHR对象之后，就发起一个HTTP请求，调用 XHR对象的 open方法。他有两个参数：方法和 URL。")]),t._v(" "),a("p",[t._v("目前主流支持的方法有 **GET 、POST、HEAD、OPTIONS、PUT、DELETE、 **")]),t._v(" "),a("p",[t._v("如果有请求头设置，下一个步骤就是设置请求头。在 open 和 send 方法之间调用， POST 请求需要设置 “Content-Type”")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRequestHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/plain'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("不能自己指定 下面请求头，XHR会自动添加这些头防止伪造。所以无法向 setRequestHeader() 传递这些")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Accept"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Charset\t\t\t\t\t\t\t\tContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Transfer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Encoding\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TE")]),t._v("\nAccept"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Encoding\t\t\t\t\t\t\t\tDate\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTrailer\nConnection\t\t\t\t\t\t\t\t\t\tExpect\t\t\t\t\t\t\t\t\t\t\t\t\t\tTransfer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Encoding\nContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Length\t\t\t\t\t\t\t\tHost\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tUpgrade\nCookie\t\t\t\t\t\t\t\t\t\t\t\tKeep"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Alive\t\t\t\t\t\t\t\t\t\t\t\tUser"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Agent\nCookie2\t\t\t\t\t\t\t\t\t\t\t\tReferer\t\t\t\t\t\t\t\t\t\t\t\t\t\tVia\n")])])]),a("h3",{attrs:{id:"顺序问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序问题"}},[t._v("#")]),t._v(" 顺序问题")]),t._v(" "),a("p",[t._v("HTTP请求的各部分有指定顺序，请求方法和URL首先到达，然后是请求头，最后是请求体。XMLHttpRequest实现通常直到调用 send方法才开始启动网络。 XHR的方法必须要匹配 HTTP请求的架构。")]),t._v(" "),a("h3",{attrs:{id:"取得相应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取得相应"}},[t._v("#")]),t._v(" 取得相应")]),t._v(" "),a("p",[t._v("一个完整的 HTTP 响应由状态码、响应头集合、响应主体组成。 都可以通过XMLHttpRequest对象的属性和方法使用。一般我们发送一个异步请求之后，JavaScript 继续执行而不等待响应。此时 可以检测 XHR 对象的 readyState属性。该属性表示请求 响应过程的当前活动阶段。**之前都是监听 onreadystatechange 事件处理程序才能确保跨浏览器兼容性。但是 XHR2 增加了一个 load事件来替代 readystatechange事件，响应接收完毕,也没有必要去监听 readyState属性，而onload事件处理程序会接收到一个event对象 **")]),t._v(" "),a("h3",{attrs:{id:"编码请求主体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码请求主体"}},[t._v("#")]),t._v(" 编码请求主体")]),t._v(" "),a("p",[t._v("POST请求包括一个请求主体，它包含客户端传递给服务器的数据，一个简单表单的编码对会使用序列化的方式 。**把编码后的名字和值分开，然后使用&符号分开名/值对。一个简单表单的编码像这样。find=pizza&zipcode=12102&radius=1km ** 表单数据格式有一个正式的 MIME 类型：“application/x-www-form-urlencoded”。这种顺序的表单数据时 必须设置 Content-Type。")]),t._v(" "),a("p",[a("strong",[t._v("enctype 是 form表单数据的编码格式，Content-Type 为 Http传输的数据的编码格式")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("enctype ( 请求的编码类型 )")]),t._v(" "),a("th",[t._v("Content-Type")]),t._v(" "),a("th",[t._v("data数据格式")]),t._v(" "),a("th",[t._v("POST 请求提交")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("默认 application/x-www-form-urlencoded")]),t._v(" "),a("td",[t._v("POST 默认application/x-www-form-urlencoded， 如果 表单有上传文件 就是 multipart/form-data")]),t._v(" "),a("td",[t._v("Form Data  key=value&key=value")]),t._v(" "),a("td",[t._v("form表单")])]),t._v(" "),a("tr",[a("td",[t._v("multipart/form-data")]),t._v(" "),a("td",[t._v("multipart/form-data 会自己指定")]),t._v(" "),a("td",[t._v("Form Data 生成一个 boundary 分割的不同字段，")]),t._v(" "),a("td",[t._v("如果指定是FormData")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("application/json")]),t._v(" "),a("td",[t._v("payload 字符串格式 一般 JSON.stringify")]),t._v(" "),a("td",[t._v("application/json")])])])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表单类型 默认 application/x-www-form-urlencoded 把数据以一个key=value对 & 拼接起来。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FormData 对象可以为序列化表单以及创建与表单格式相同的数据提供了便利， 通过XHR2传输")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeFormData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" param "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%20'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%20'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一般 POST PUT PATCH 等都是设置默认的 Content-Type")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT_CONTENT_TYPE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/x-www-form-urlencoded'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果数据是 FormDatF的 就删除 Content-Type 浏览器会自己设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFormData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("requestData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" requesetHeaders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"上传进度事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上传进度事件"}},[t._v("#")]),t._v(" 上传进度事件")]),t._v(" "),a("p",[t._v("XHR2 给出 HTTP请求上传的事件，在实现这些特性的浏览器中。有一个upload 属性。upload 属性值是一个对象，它定义了 addEventListener（）方法和整个 progress事件集合，设置 onprogress 和 x.upload.onprogress 以监控请求的上传进度。")])])}],!1,null,null,null);a.default=e.exports}}]);