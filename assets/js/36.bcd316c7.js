(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{203:function(t,s,n){"use strict";n.r(s);var a=n(0),r=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("单例模式同时解决了两个问题， 所以违反了_单一职责原则")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/facade",target:"_blank",rel:"noopener noreferrer"}},[t._v("外观模式"),s("OutboundLink")],1),t._v("类通常可以转换为"),s("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"}},[t._v("单例模式"),s("OutboundLink")],1),t._v("类， 因为在大部分情况下一个外观对象就足够了。")]),t._v(" "),s("li",[t._v("如果你能将对象的所有共享状态简化为一个享元对象， 那么"),s("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/flyweight",target:"_blank",rel:"noopener noreferrer"}},[t._v("享元模式"),s("OutboundLink")],1),t._v("就和"),s("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"}},[t._v("单例"),s("OutboundLink")],1),t._v("类似了。 但这两个模式有两个根本性的不同。\n"),t._m(9)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"}},[t._v("抽象工厂模式"),s("OutboundLink")],1),t._v("、 "),s("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"}},[t._v("生成器模式"),s("OutboundLink")],1),t._v("和"),s("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"}},[t._v("原型模式"),s("OutboundLink")],1),t._v("都可以用"),s("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"}},[t._v("单例"),s("OutboundLink")],1),t._v("来实现。")])]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15)])}),[function(){var t=this._self._c;return t("h1",{attrs:{id:"创建型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[this._v("#")]),this._v(" 创建型模式")])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("单例模式是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[this._v("#")]),this._v(" 问题")])},function(){var t=this._self._c;return t("ul",[t("li",[t("strong",[this._v("保证一个类只有一个实例")]),this._v(", 如果你创建了一个对象， 同时过一会儿后你决定再创建一个新对象， 此时你会获得之前已创建的对象， 而不是一个新对象。")]),this._v(" "),t("li",[t("strong",[this._v("为该实例提供一个全局访问节点")]),this._v("，将其放在同一个类中， 特别是当其他代码已经依赖这个类时更应该如此。")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现方式"}},[this._v("#")]),this._v(" 实现方式")])},function(){var t=this,s=t._self._c;return s("ol",[s("li",[t._v("在类中添加一个私有静态成员变量用于保存单例实例。")]),t._v(" "),s("li",[t._v("声明一个公有静态构建方法用于获取单例实例。")]),t._v(" "),s("li",[t._v('在静态方法中实现"延迟初始化"。 该方法会在首次被调用时创建一个新对象， 并将其存储在静态成员变量中。 此后该方法每次被调用时都返回该实例。')]),t._v(" "),s("li",[t._v("将类的构造函数设为私有。 类的静态方法仍能调用构造函数， 但是其他对象不能调用。")]),t._v(" "),s("li",[t._v("检查客户端代码， 将对单例的构造函数的调用替换为对其静态构建方法的调用。")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"单例模式优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例模式优缺点"}},[this._v("#")]),this._v(" 单例模式优缺点")])},function(){var t=this,s=t._self._c;return s("ul",[s("li",[s("p",[t._v("你可以保证一个类只有一个实例。")])]),t._v(" "),s("li",[s("p",[t._v("你获得了一个指向该实例的全局访问节点。")])]),t._v(" "),s("li",[s("p",[t._v("仅在首次请求单例对象时对其进行初始化。")])]),t._v(" "),s("li",[s("p",[t._v("违反了_单一职责原则_。 该模式同时解决了两个问题。")])]),t._v(" "),s("li",[s("p",[t._v("单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多等。")])]),t._v(" "),s("li",[s("p",[t._v("该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。")])]),t._v(" "),s("li",[s("p",[t._v("单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法， 所以你需要想出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。")])])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"与其他模式的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与其他模式的关系"}},[this._v("#")]),this._v(" 与其他模式的关系")])},function(){var t=this._self._c;return t("ol",[t("li",[this._v("只会有一个单例实体， 但是"),t("em",[this._v("享元")]),this._v("类可以有多个实体， 各实体的内在状态也可以不同。")]),this._v(" "),t("li",[t("em",[this._v("单例")]),this._v("对象可以是可变的。 享元对象是不可变的。")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"代码实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码实例"}},[this._v("#")]),this._v(" 代码实例")])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Singleton\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Singleton "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("Singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      Singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("someBusinessLogic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clientCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Singleton works'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"工厂方法-factory-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法-factory-method"}},[this._v("#")]),this._v(" 工厂方法 Factory Method")])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。")])])},function(){var t=this._self._c;return t("p",[t("em",[this._v("工厂")]),this._v("方法代替对于对象构造函数的直接调用 （即使用 "),t("code",[this._v("new")]),this._v("运算符）。 不用担心， 对象仍将通过 "),t("code",[this._v("new")]),this._v("运算符创建， 只是该运算符改在工厂方法中调用罢了。 工厂方法返回的对象通常被称作 “产品”。")])},function(){var t=this._self._c;return t("ul",[t("li")])}],!1,null,null,null);s.default=r.exports}}]);