(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{171:function(v,_,t){"use strict";t.r(_);var l=t(0),s=Object(l.a)({},(function(){this._self._c;return this._m(0)}),[function(){var v=this,_=v._self._c;return _("div",{staticClass:"content"},[_("h2",{attrs:{id:"反射机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#反射机制"}},[v._v("#")]),v._v(" 反射机制")]),v._v(" "),_("h3",{attrs:{id:"使用反射"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用反射"}},[v._v("#")]),v._v(" 使用反射")]),v._v(" "),_("p",[v._v("使用反射，首先要得到 class 文件对象，其实也就是得到Class类的对象")]),v._v(" "),_("p",[v._v("Class 类主要API：")]),v._v(" "),_("ul",[_("li",[v._v("成员变量 —— Field")]),v._v(" "),_("li",[v._v("成员方法 —— Constructor")]),v._v(" "),_("li",[v._v("构造方法 —— Method")])]),v._v(" "),_("p",[v._v("获取 class 文件对象的方式：")]),v._v(" "),_("ul",[_("li",[v._v("1、Objec 类的 getClass() 方法")]),v._v(" "),_("li",[v._v("2、数据类型的静态属性 class")]),v._v(" "),_("li",[v._v("3、Class 类中的静态方法 ForName(string className)")])]),v._v(" "),_("p",[v._v("获取成员变量")]),v._v(" "),_("ul",[_("li",[v._v("1、获取Class对象")]),v._v(" "),_("li",[v._v("​    2、通过Class 对象获取 Constructor 对象")]),v._v(" "),_("li",[v._v("​    3、Object obj = Constructor.newInstance() 创建对象")]),v._v(" "),_("li",[v._v("​    4、Field field = Class.getField('指定变量名') 获取单个成员变量对象")]),v._v(" "),_("li",[v._v('​    5、field.set(obj, "") 为obj对象的field字段赋值')])]),v._v(" "),_("p",[v._v("通过反射调用成员方法")]),v._v(" "),_("ul",[_("li",[v._v("1：获取Class对象")]),v._v(" "),_("li",[v._v("2：通过Class对象获取Constructor对象")]),v._v(" "),_("li",[v._v("3：Constructor.newInstance()创建对象")]),v._v(" "),_("li",[v._v('4：通过Class对象获取Method对象  ------getMethod("方法名");')]),v._v(" "),_("li",[v._v("5: Method对象调用invoke方法实现功能")])]),v._v(" "),_("p",[v._v("如果调用的是私有方法那么需要暴力访问")]),v._v(" "),_("ul",[_("li",[v._v("1: getDeclaredMethod()")]),v._v(" "),_("li",[v._v("2: setAccessiable();")])]),v._v(" "),_("h3",{attrs:{id:"反射的功能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#反射的功能"}},[v._v("#")]),v._v(" 反射的功能")]),v._v(" "),_("ul",[_("li",[v._v("在运行中分析类的能力")]),v._v(" "),_("li",[v._v("在运行中查看和操作对象\n"),_("ul",[_("li",[v._v("基于反射自由创建对象")]),v._v(" "),_("li",[v._v("反射构建出无法直接访问的类")]),v._v(" "),_("li",[v._v("set 或者 get 到无法访问的成员变量")]),v._v(" "),_("li",[v._v("调用不可访问的方法")])])]),v._v(" "),_("li",[v._v("实现通用的数据操作代码")]),v._v(" "),_("li",[v._v("类似函数指针的功能")])]),v._v(" "),_("h3",{attrs:{id:"注解-（annotation）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注解-（annotation）"}},[v._v("#")]),v._v(" 注解 （Annotation）")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Override 注解表示子类要重写（override）父类对应方法")])]),v._v(" "),_("li",[_("p",[v._v("Deprecated 注解表示方法是不建议被使用的")])]),v._v(" "),_("li",[_("p",[v._v("SuppressWarnings 注解表示抑制警告")])])]),v._v(" "),_("h4",{attrs:{id:"自定义注解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#自定义注解"}},[v._v("#")]),v._v(" 自定义注解")]),v._v(" "),_("p",[v._v("当注解中的属性名为value时，在对其赋值时 可以不指定属性的名称而直接写上属性值即可，除了value以外的其他值都需要使用 name = value 这种赋值方式明确指定给谁赋值。")]),v._v(" "),_("p",[_("strong",[v._v("可以给定默认值")])]),v._v(" "),_("blockquote",[_("p",[v._v('String value() default "hello";')]),v._v(" "),_("p",[v._v("int age() default 23;")]),v._v(" "),_("p",[v._v("// 如果是数组")]),v._v(" "),_("p",[v._v("String[] value;")]),v._v(" "),_("p",[v._v('@annotation(value={"hello", "world"})')])])])}],!1,null,null,null);_.default=s.exports}}]);