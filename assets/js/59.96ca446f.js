(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{226:function(t,s,a){"use strict";a.r(s);var e=a(0),r=Object(e.a)({},(function(){this._self._c;return this._m(0)}),[function(){var t=this,s=t._self._c;return s("div",{staticClass:"content"},[s("h2",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("正则表达式是由一组字母和符号组成的特殊文本，可以用来从文本中找出满足你想要的格式的句子。")])]),t._v(" "),s("p",[s("strong",[t._v("正则匹配默认是贪婪匹配，就是尽可能多的匹配文本字符串")])])]),t._v(" "),s("h2",{attrs:{id:"正则回溯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则回溯"}},[t._v("#")]),t._v(" 正则回溯")]),t._v(" "),s("p",[t._v("回溯算法是一种查找计算问题的解决方案，他会逐步构建候选解决方案，")]),t._v(" "),s("h3",{attrs:{id:"举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ab{1,3}bc")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、正则引擎先匹配 a。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、正则引擎尽可能多地(贪婪)匹配 b{1,3}中的 b。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3、正则引擎去匹配 b，发现没 b 了，糟糕！赶紧回溯！")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4、返回 b{1,3}这一步，不能这么贪婪，少匹配个 b。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5、正则引擎去匹配 b。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6、正则引擎去匹配 c，完成匹配。")]),t._v("\n\n")])])]),s("p",[t._v("上面发生正则回溯的例子可以看出来，正则回溯的过程就是一个试错的过程，这也是回溯算法的精髓所在。回溯会增加匹配的步骤，势必会影响文本匹配的性能，所以，要想提升正则表达式的匹配性能，了解回溯出现的场景(形式)是非常关键的。")]),t._v(" "),s("h2",{attrs:{id:"基本元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本元字符"}},[t._v("#")]),t._v(" 基本元字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v(".")]),t._v(" "),s("td",[t._v("匹配除了换行符之外的任何单个字符（一般范围很广的都用这个）")])]),t._v(" "),s("tr",[s("td",[t._v("\\")]),t._v(" "),s("td",[t._v("非特殊字符之前的反斜扛表示下一个特殊字符")])]),t._v(" "),s("tr",[s("td",[t._v("|")]),t._v(" "),s("td",[t._v("逻辑或操作符 选择表达式。123|456 匹配123 或者 456")])]),t._v(" "),s("tr",[s("td",[t._v("[ ]")]),t._v(" "),s("td",[t._v("定义一个字符集合，匹配字符集合中的一个字符，但是 . \\ 这些字符表示自身")])]),t._v(" "),s("tr",[s("td",[t._v("[^]")]),t._v(" "),s("td",[t._v("不在字符集合的任意字符")])]),t._v(" "),s("tr",[s("td",[t._v("-")]),t._v(" "),s("td",[t._v("定义一个区间 例如[A-Z] 其首尾字符在ASCII字符集里面")])])])]),t._v(" "),s("h2",{attrs:{id:"数量元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数量元字符"}},[t._v("#")]),t._v(" 数量元字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("{m, n}")]),t._v(" "),s("td",[t._v("匹配前面一会字符至少m次到至多n次重复 单个{m}表示匹配m次，{m,}至少m次")])]),t._v(" "),s("tr",[s("td",[t._v("+")]),t._v(" "),s("td",[t._v("匹配前面一个表达式一次或多次 相当于{1,}")])]),t._v(" "),s("tr",[s("td",[t._v("*")]),t._v(" "),s("td",[t._v("匹配前面一个表达式零次或者多次。相当于{0,} 可以一次都没有")])]),t._v(" "),s("tr",[s("td",[t._v("？")]),t._v(" "),s("td",[t._v("匹配前面零次或一次 {0,1} "),s("strong",[t._v("如果放在任何量词 * + ？ { } 后面的时候就使得量词变为非贪婪模式 （尽量匹配少的字符）")]),t._v(" 比如 '123abc' 应用/\\d+/ 会返回 '123',如果是 /\\d+?/ 就会只会匹配到'1' 但是有一种情况 'aaab' 应用 /a+?b/匹配到的却是 'aaab' 整个字符串，这是因为正则表达式的模式匹配总会寻找字符串中第一个可能匹配的位置。由于该匹配是从字符串的第一个字符开始")])])])]),t._v(" "),s("h2",{attrs:{id:"位置元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位置元字符"}},[t._v("#")]),t._v(" 位置元字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("^")]),t._v(" "),s("td",[t._v("单独使用匹配表达式的开始")])]),t._v(" "),s("tr",[s("td",[t._v("$")]),t._v(" "),s("td",[t._v("匹配表达式的结束位置")])]),t._v(" "),s("tr",[s("td",[t._v("\\b")]),t._v(" "),s("td",[t._v("匹配单词边界 \\w 和 \\W之间的位置。")])]),t._v(" "),s("tr",[s("td",[t._v("\\B")]),t._v(" "),s("td",[t._v("匹配非单词边界")])]),t._v(" "),s("tr",[s("td",[t._v("（?=p）")]),t._v(" "),s("td",[t._v("匹配p前面的位置")])]),t._v(" "),s("tr",[s("td",[t._v("（?!p）")]),t._v(" "),s("td",[t._v("匹配不是p前面的位置")])])])]),t._v(" "),s("p",[t._v("\\b 和 \\B 是单词的边界。一般是 \\w 和 \\W之间的位置。")]),t._v(" "),s("h2",{attrs:{id:"边界-b-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#边界-b-b"}},[t._v("#")]),t._v(" 边界 \\b \\B")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("\\w 匹配所有的字母数字[a-zA-Z0-9_]")])]),t._v(" "),s("li",[s("strong",[t._v("\\W 匹配一个非单字字符。等价于 "),s("code",[t._v("[^A-Za-z0-9_]")]),t._v("。")])])]),t._v(" "),s("p",[t._v("词边界是一种检查，跟 ^ $ 是一样的。当正则引擎遇到 \\b 时，会检查字符串中的位置是否是词边界。有三种单词边界")]),t._v(" "),s("ul",[s("li",[t._v("字符串开头，如果第一个字符串是单词字符\\w")]),t._v(" "),s("li",[t._v("字符串中的两个字符之间 一个是 \\w 另一个不是")]),t._v(" "),s("li",[t._v("字符串末尾 如果最后一个字符是单词字符\\w")])]),t._v(" "),s("h3",{attrs:{id:"正向肯定预查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正向肯定预查"}},[t._v("#")]),t._v(" 正向肯定预查 ?=")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[JS] Lesson_01.mp4'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [#JS#] #Lesson_01#.#mp4#")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?=l)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果是 he#l#lo")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?!l)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果是 #h#ell#o#")]),t._v("\n")])])]),s("h2",{attrs:{id:"只匹配不捕获-？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#只匹配不捕获-？"}},[t._v("#")]),t._v(" 只匹配不捕获 ？:")]),t._v(" "),s("p",[t._v("在正则表达式中，可以选择关闭对不需要的内容的捕获，就是不捕获，以此来提高正则表达式的执行速度和节约内存使用。")]),t._v(" "),s("p",[s("strong",[t._v('要在一篇文章中查找"program"和"project"两个单词，正则表达式可表示为/program|project/,也可表示为/pro(gram|ject)/，但是缓存子匹配(gramject)没有意义，就可以用/pro(?:gram|ject)/进行非捕获性匹配这样既可以简洁匹配又可不缓存无实际意义的字匹配')]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"简写字符集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简写字符集"}},[t._v("#")]),t._v(" 简写字符集")]),t._v(" "),s("p",[t._v("正则表达式提供一些常用的字符集简写。如下:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("简写")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v(".")]),t._v(" "),s("td",[t._v("除换行符外的所有字符")])]),t._v(" "),s("tr",[s("td",[t._v("\\w")]),t._v(" "),s("td",[t._v("匹配所有字母数字，等同于 "),s("code",[t._v("[a-zA-Z0-9_]")])])]),t._v(" "),s("tr",[s("td",[t._v("\\W")]),t._v(" "),s("td",[t._v("匹配所有非字母数字，即符号，等同于： "),s("code",[t._v("[^\\w]")])])]),t._v(" "),s("tr",[s("td",[t._v("\\d")]),t._v(" "),s("td",[t._v("匹配数字： "),s("code",[t._v("[0-9]")])])]),t._v(" "),s("tr",[s("td",[t._v("\\D")]),t._v(" "),s("td",[t._v("匹配非数字： "),s("code",[t._v("[^\\d]")])])]),t._v(" "),s("tr",[s("td",[t._v("\\s")]),t._v(" "),s("td",[t._v("匹配所有空格字符，等同于： "),s("code",[t._v("[\\t\\n\\f\\r\\p{Z}]")])])]),t._v(" "),s("tr",[s("td",[t._v("\\S")]),t._v(" "),s("td",[t._v("匹配所有非空格字符： "),s("code",[t._v("[^\\s]")])])]),t._v(" "),s("tr",[s("td",[t._v("\\f")]),t._v(" "),s("td",[t._v("匹配一个换页符")])]),t._v(" "),s("tr",[s("td",[t._v("\\n")]),t._v(" "),s("td",[t._v("匹配一个换行符")])]),t._v(" "),s("tr",[s("td",[t._v("\\r")]),t._v(" "),s("td",[t._v("匹配一个回车符")])]),t._v(" "),s("tr",[s("td",[t._v("\\t")]),t._v(" "),s("td",[t._v("匹配一个制表符")])]),t._v(" "),s("tr",[s("td",[t._v("\\v")]),t._v(" "),s("td",[t._v("匹配一个垂直制表符")])]),t._v(" "),s("tr",[s("td",[t._v("\\p")]),t._v(" "),s("td",[t._v("匹配 CR/LF（等同于 "),s("code",[t._v("\\r\\n")]),t._v("），用来匹配 DOS 行终止符")])])])]),t._v(" "),s("h2",{attrs:{id:"零宽度断言（前后预查）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#零宽度断言（前后预查）"}},[t._v("#")]),t._v(" 零宽度断言（前后预查）")]),t._v(" "),s("p",[t._v("先行断言和后发断言都属于"),s("strong",[t._v("非捕获簇")]),t._v("（不捕获文本 ，也不针对组合计进行计数）。 先行断言用于判断所匹配的格式是否在另一个确定的格式之前，匹配结果不包含该确定格式（仅作为约束）。")]),t._v(" "),s("p",[t._v("例如，我们想要获得所有跟在 "),s("code",[t._v("$")]),t._v(" 符号后的数字，我们可以使用正后发断言 "),s("code",[t._v("(?<=\\$)[0-9\\.]*")]),t._v("。 这个表达式匹配 "),s("code",[t._v("$")]),t._v(" 开头，之后跟着 "),s("code",[t._v("0,1,2,3,4,5,6,7,8,9,.")]),t._v(" 这些字符可以出现大于等于 0 次。")]),t._v(" "),s("p",[t._v("零宽度断言如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("符号")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("?=")]),t._v(" "),s("td",[t._v("正先行断言-存在")])]),t._v(" "),s("tr",[s("td",[t._v("?!")]),t._v(" "),s("td",[t._v("负先行断言-排除")])]),t._v(" "),s("tr",[s("td",[t._v("?<=")]),t._v(" "),s("td",[t._v("正后发断言-存在")])]),t._v(" "),s("tr",[s("td",[t._v("?<!")]),t._v(" "),s("td",[t._v("负后发断言-排除")])])])]),t._v(" "),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h3",{attrs:{id:"正先行断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正先行断言"}},[t._v("#")]),t._v(" "),s("code",[t._v("?=...")]),t._v(" 正先行断言")]),t._v(" "),s("p",[s("code",[t._v("?=...")]),t._v(" 正先行断言，表示第一部分表达式之后必须跟着 "),s("code",[t._v("?=...")]),t._v("定义的表达式。")]),t._v(" "),s("p",[t._v("返回结果只包含满足匹配条件的第一部分表达式。 定义一个正先行断言要使用 "),s("code",[t._v("()")]),t._v("。在括号内部使用一个问号和等号： "),s("code",[t._v("(?=...)")]),t._v("。")]),t._v(" "),s("p",[t._v("正先行断言的内容写在括号中的等号后面。 例如，表达式 "),s("code",[t._v("(T|t)he(?=\\sfat)")]),t._v(" 匹配 "),s("code",[t._v("The")]),t._v(" 和 "),s("code",[t._v("the")]),t._v("，在括号中我们又定义了正先行断言 "),s("code",[t._v("(?=\\sfat)")]),t._v(" ，即 "),s("code",[t._v("The")]),t._v(" 和 "),s("code",[t._v("the")]),t._v(" 后面紧跟着 "),s("code",[t._v("(空格)fat")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"负先行断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负先行断言"}},[t._v("#")]),t._v(" "),s("code",[t._v("?!...")]),t._v(" 负先行断言")]),t._v(" "),s("p",[t._v("负先行断言 "),s("code",[t._v("?!")]),t._v(" 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。 "),s("code",[t._v("正先行断言")]),t._v(" 定义和 "),s("code",[t._v("负先行断言")]),t._v(" 一样，区别就是 "),s("code",[t._v("=")]),t._v(" 替换成 "),s("code",[t._v("!")]),t._v(" 也就是 "),s("code",[t._v("(?!...)")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"正后发断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正后发断言"}},[t._v("#")]),t._v(" "),s("code",[t._v("?<= ...")]),t._v(" 正后发断言")]),t._v(" "),s("p",[t._v("正后发断言 记作"),s("code",[t._v("(?<=...)")]),t._v(" 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。")]),t._v(" "),s("h3",{attrs:{id:"负后发断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负后发断言"}},[t._v("#")]),t._v(" "),s("code",[t._v("?<!...")]),t._v(" 负后发断言")]),t._v(" "),s("p",[t._v("负后发断言 记作 "),s("code",[t._v("(?<!...)")]),t._v(" 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("总结 零宽断言 只会匹配不会捕获 用来做约束")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("模式")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("匹配")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("x(?=y)")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("前瞻肯定断言")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("x")]),t._v(" ，仅当后面跟着 "),s("code",[t._v("y")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("x(?!y)")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("前瞻否定断言")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("x")]),t._v(" ，仅当后面不跟 "),s("code",[t._v("y")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("(?<=y)x")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("后瞻肯定断言")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("x")]),t._v(" ，仅当跟在 "),s("code",[t._v("y")]),t._v(" 后面")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("(?<!y)x")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("后瞻否定断言")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("x")]),t._v(" ，仅当不跟在 "),s("code",[t._v("y")]),t._v(" 后面")])])])]),t._v(" "),s("h2",{attrs:{id:"贪婪和非贪婪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪和非贪婪"}},[t._v("#")]),t._v(" 贪婪和非贪婪")]),t._v(" "),s("p",[t._v("正则表达式里面默认是贪婪匹配的。"),s("strong",[t._v("量词后面加？就是非贪婪 一定要记得是量词")])]),t._v(" "),s("h4",{attrs:{id:"贪婪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪"}},[t._v("#")]),t._v(" 贪婪")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("tr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AB1111BA111BA"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("AB[\\s\\S]+BA")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配过程")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REG")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("AB[\\s\\S]+BA")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MATCH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("               匹配第一个字符\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB")]),t._v("              匹配第二个字符\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB1111BA111BA")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\\s\\"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" 贪婪吞并所有字符\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB1111BA111BA")]),t._v("   回溯，匹配字符"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB1111BA111B")]),t._v("    找到字符"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("，继续匹配"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB1111BA111BA")]),t._v("   找到字符"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("，匹配完成，停止\n")])])]),s("p",[t._v("首先是匹配AB，遇到了 "),s("code",[t._v("[\\s\\S]+")]),t._v("，这是贪婪模式的匹配，他会一口吞掉后面所有的字符，也就是如果 reg 的内容为 AB[\\s\\S]+，那后面的就不用看了，直接全部匹配，**而往后看，正则后面还有B字符，所以他会先回溯到倒数第一个字符，匹配看是否为 B，显然倒数第一个字符不是B，于是他又接着回溯，找到了B字母，找到之后就不继续回溯了（回溯）**而是往后继续匹配，此刻匹配的是字符A，程序发现紧跟B后的字母确实是A，那此时匹配就结束了。")]),t._v(" "),s("h4",{attrs:{id:"非贪婪-惰性匹配-在量词后面添加一个问号-？来启用-惰性匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非贪婪-惰性匹配-在量词后面添加一个问号-？来启用-惰性匹配"}},[t._v("#")]),t._v(" 非贪婪 惰性匹配 在量词后面添加一个问号 ？来启用 惰性匹配")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AB1111BA111BA"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("AB[\\s\\S]+?BA")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配过程")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REG")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("AB[\\s\\S]+BA")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MATCH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("               匹配第一个字符\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB")]),t._v("              匹配第二个字符\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\\s\\"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" 非贪婪跳过并开始匹配"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB1")]),t._v("             不是"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("，回溯，继续匹配\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB11")]),t._v("            不是"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("，回溯，继续匹配\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB111")]),t._v("           不是"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("，回溯，继续匹配\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB1111")]),t._v("          不是"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("，回溯，继续匹配\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB1111B")]),t._v("         找到字符"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("，继续匹配"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB1111BA")]),t._v("        找到字符"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("，匹配完成，停止匹配\n")])])]),s("p",[t._v("与上面不同的是，reg 中多了一个 ? 号，此时的匹配模式为懒惰模式，也叫做非贪婪匹配。此时的匹配流程是，先匹配AB，遇到[\\s\\S]+?，程序尝试跳过并开始匹配后面的字符B，往后查看的时候，发现是数字1，不是要匹配的内容，继续往后匹配，知道遇到字符B，然后匹配A，发现紧接着B后面就有一个A，于是宣布匹配完成，停止程序。")]),t._v(" "),s("h2",{attrs:{id:"分组和分支结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组和分支结构"}},[t._v("#")]),t._v(" 分组和分支结构")]),t._v(" "),s("p",[t._v("比如 /(abc)+/ 一个或多个abc字符串，用这些()包起来的地方就叫分组。")]),t._v(" "),s("h4",{attrs:{id:"引用分组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用分组"}},[t._v("#")]),t._v(" 引用分组")]),t._v(" "),s("p",[s("strong",[t._v("提取数据")])]),t._v(" "),s("p",[t._v("比如要用正则来匹配一个日期格式，yyyy-mm-dd，可以写出简单的正则"),s("code",[t._v("/\\d{4}-\\d{2}-\\d{2}/")]),t._v("，这个正则还可以改成分组形式的"),s("code",[t._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),t._v("这样可以分别提取出一个日期的年月日，用 String 的 match 方法或者用正则的 exec 方法都可以")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})-(\\d{2})-(\\d{2})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-08-09"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ["2017-08-09", "2017", "08", "09", index: 0, input: "2017-08-09"]')]),t._v("\n")])])]),s("h2",{attrs:{id:"回溯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回溯"}},[t._v("#")]),t._v(" 回溯")]),t._v(" "),s("p",[t._v("例如 /ab{1,3}bbc/.test('abbbc'); 这个是怎么匹配的呢。")]),t._v(" "),s("p",[t._v('搜索这种状态触发所能达到的所有"状态"，当第一条路走到尽头，会回退一步或若干步，从另一种可能状态出发继续搜索。直到所有路径都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法” 。')]),t._v(" "),s("p",[t._v("贪婪和非贪婪的匹配都会产生回溯，不同的是贪婪的是先尽量多的匹配，如果不行就吐出一个然后继续匹配，再不行就再吐出一个，非贪婪的是先尽量少的匹配。如果不行就再多匹配一个，再不行就再来一个 。")]),t._v(" "),s("p",[t._v("分支结构也会产生回溯，比如"),s("code",[t._v("/^(test|te)sts$/.test('tests')")]),t._v(" 前面括号里面的匹配过程是先匹配到 test 然后继续往后匹配匹配到字符 "),s("code",[t._v("s")]),t._v(" 的时候还是成功的，匹配到 "),s("code",[t._v("st")]),t._v(" 的时候发现不能匹配， 所以会回到前面的分支结构的其他分支继续匹配，如果不行的话再换其他分支。")]),t._v(" "),s("h2",{attrs:{id:"怎么读正则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么读正则"}},[t._v("#")]),t._v(" 怎么读正则")]),t._v(" "),s("p",[s("strong",[t._v("结构和操作符")])]),t._v(" "),s("p",[t._v("结构：字符字面量、字符组、量词、锚字符、分组、选择分支、方向引用")]),t._v(" "),s("p",[t._v("操作符：")]),t._v(" "),s("ol",[s("li",[t._v("转义符 \\")]),t._v(" "),s("li",[t._v("括号和方括号 (...)、(?:...)、(?=...)、(?!...)、[...]")]),t._v(" "),s("li",[t._v("量词限定符 {m}、{m,n}、{m,}、?、*、+")]),t._v(" "),s("li",[t._v("位置和序列 ^ 、$、 \\元字符、 一般字符")]),t._v(" "),s("li",[t._v("管道符（竖杠） |")])]),t._v(" "),s("p",[t._v("操作符的优先级是从上到下，由高到低的，所以在分析正则的时候可以根据优先级来拆分正则，比如")]),t._v(" "),s("p",[t._v("/ab?(c|de*)+|fg/")]),t._v(" "),s("ol",[s("li",[t._v("因为括号是一个整体，所以"),s("code",[t._v("/ab?()+|fg/")]),t._v(",括号里面具体是什么可以放到后面再分析")]),t._v(" "),s("li",[t._v("根据量词和管道符的优先级，所以"),s("code",[t._v("a")]),t._v(", "),s("code",[t._v("b?")]),t._v(", "),s("code",[t._v("()+")]),t._v("和管道符后面的"),s("code",[t._v("f")]),t._v(", "),s("code",[t._v("g")])]),t._v(" "),s("li",[t._v("同理分析括号里面的"),s("code",[t._v("c|de*")]),t._v(" => "),s("code",[t._v("c")]),t._v("和"),s("code",[t._v("d")]),t._v(", "),s("code",[t._v("e*")])]),t._v(" "),s("li",[t._v("综上，这个正则描述的是")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://github.com/facebook201/sy-fontend-system/blob/master/img/reg.jpg?raw=true",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"实用案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实用案例"}},[t._v("#")]),t._v(" 实用案例")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^([1-9]\\d*|0)(\\.\\d{1,2})?$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最多保留两位小数的数字")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" test1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1234567890'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" format2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" test1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?!^)(?=(\\d{3})+$)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" format "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" test1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\B(?=(\\d{3})+(?!\\d))")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* /\\B(?=(\\d{3})+(?!\\d))/g：正则匹配边界\\B，边界后面必须跟着(\\d{3})+(?!\\d);\n(\\d{3})+：必须是1个或多个的3个连续数字;\n(?!\\d)：第2步中的3个数字不允许后面跟着数字;\n(\\d{3})+(?!\\d)：所以匹配的边界后面必须跟着3*n（n>=1）的数字。*/")]),t._v("\n\n")])])])])}],!1,null,null,null);s.default=r.exports}}]);